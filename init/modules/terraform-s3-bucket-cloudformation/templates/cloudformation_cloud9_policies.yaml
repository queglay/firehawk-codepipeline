# Consider adding deny policies from here https://github.com/ozbillwang/terraform-best-practices

AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Custom IAM policies for admin users.  These permissions are a work in progress and further reduction of the permissions should be applied for production use.
Resources:
  CreateSSMInstanceProfile:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: Cloud9SSMInstanceProfileFirehawk
      Description: Custom SSM profile for Cloud9 seed instance
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
              - ssm:UpdateInstanceInformation
            Resource: "*"
  CreateCloud9CustomPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: Cloud9CustomPolicyFirehawk
      Description: Custom Cloud9 policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ec2:RunInstances
              - ec2:CreateSecurityGroup
              - ec2:DescribeVpcs
              - ec2:DescribeSubnets
              - ec2:DescribeSecurityGroups
              - ec2:DescribeInstances
              - ec2:DescribeInstanceStatus
              - cloudformation:CreateStack
              - cloudformation:DescribeStacks
              - cloudformation:DescribeStackEvents
              - cloudformation:DescribeStackResources
            Resource: "*"
          - Effect: Allow
            Action:
              - ec2:TerminateInstances
              - ec2:DeleteSecurityGroup
              - ec2:AuthorizeSecurityGroupIngress
            Resource: "*"
          - Effect: Allow
            Action:
              - cloudformation:DeleteStack
            Resource: arn:aws:cloudformation:*:*:stack/aws-cloud9-*
          - Effect: Allow
            Action:
              - ec2:CreateTags
            Resource:
              - arn:aws:ec2:*:*:instance/*
              - arn:aws:ec2:*:*:security-group/*
            Condition:
              StringLike:
                aws:RequestTag/Name: aws-cloud9-*
          - Effect: Allow
            Action:
              - ec2:StartInstances
              - ec2:StopInstances
            Resource: "*"
            Condition:
              StringLike:
                ec2:ResourceTag/aws:cloudformation:stack-name: aws-cloud9-*
          - Effect: Allow
            Action:
              - iam:ListInstanceProfiles
              - iam:GetInstanceProfile
            Resource:
              - arn:aws:iam::*:instance-profile/cloud9/*
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - arn:aws:iam::*:role/service-role/AWSCloud9SSMAccessRole
            Condition:
              StringLike:
                iam:PassedToService: ec2.amazonaws.com
  CreateCloud9CustomRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: Cloud9CustomAdminRoleFirehawk
      Description: Custom admin role for Firehawk Cloud9 seed instance
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - cloud9.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - !Ref CreateSSMInstanceProfile
        - !Ref CreateCloud9CustomPolicy
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/AdministratorAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
  CreateCloud9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: Cloud9CustomAdminRoleFirehawk
      Path: /
      Roles: 
        - !Ref CreateCloud9CustomRole

    # IAM entities (Groups, Roles, and Users) are optional properties
    # Users: !If [hasUsers, !Ref paramUsers, !Ref "AWS::NoValue"] # attach this policy to the list of specified users if any
    # Groups: !If [hasGroups, !Ref paramGroups, !Ref "AWS::NoValue"] # attach this policy to the list of specified groups if any
    # Roles: !If [hasRoles, !Ref paramRoles, !Ref "AWS::NoValue"] # attach this policy to the list of specified roles if any
## =================== OUTPUT ===================
Outputs:
  outputName:
    Description: Admin Instance Profile name
    Value: !Ref CreateCloud9InstanceProfile

