#!/bin/bash

set -e

DEFAULT_LATEST_AMI="false"
latest_ami="$DEFAULT_LATEST_AMI"
success="true"

EXECDIR="$(pwd)"
SOURCE=${BASH_SOURCE[0]} # resolve the script dir even if a symlink is used to this script
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPTDIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd ) # The directory of this script
export TF_VAR_firehawk_path="$SCRIPTDIR/../modules/firehawk/deploy/firehawk-main/" # the path of the firehawk-main folder
export TF_VAR_firehawk_ami_path="$SCRIPTDIR/../modules/firehawk/deploy/packer-firehawk-amis/modules/firehawk-ami"
echo "AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION"

function log {
  local -r level="$1"
  local -r message="$2"
  local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local -r message="$1"
  log "INFO" "$message"
}

function log_warn {
  local -r message="$1"
  log "WARN" "$message"
}

function log_error {
  local -r message="$1"
  log "ERROR" "$message"
}

function error_if_empty {
  if [[ -z "$2" ]]; then
    log_error "$1"
  fi
  return
}

function output_ami_var {
  local -r ami_role=$1
  local -r ami_result=$2
  local -r var_name=$3

  if [[ -z "$ami_result" || "$ami_result" == "null" ]]; then
    success="false"
    log_warn "Images required for deployment are not present.  You will need to build them before continuing."
    log_warn "$var_name"
    log_warn ""
  else
    printf "$var_name"
    printf "\n  Found role $ami_role result:"
    printf "\n  $ami_result\n\n"
    echo "export $var_name=$ami_result" | tee --append $SCRIPTDIR/../modules/firehawk/env_vars.sh
  fi
}

# Query AMI's by role tag and commit
function retrieve_ami {
  local -r latest_ami="$1"
  local -r ami_role="$2"
  local -r ami_commit_hash="$3"
  local ami_result="null"
  if [[ "$latest_ami" == true ]]; then
    ami_filters="Name=tag:ami_role,Values=$ami_role"
    log_info "\n...Query latest AMI"
  else
    ami_filters="Name=tag:ami_role,Values=$ami_role Name=tag:commit_hash,Values=$ami_commit_hash"
    log_info "\n...Query AMI with commit: $ami_commit_hash"
  fi
  # this query by aws will return null presently if invalid
  ami_result=$(aws ec2 describe-images --filters $ami_filters --owners self --region $AWS_DEFAULT_REGION --query 'sort_by(Images, &CreationDate)[].ImageId' --output json | jq '.[-1]' --raw-output)

  echo "$ami_result"
}

# Construct env vars file to bake some of the config.

rm -fr $SCRIPTDIR/../modules/firehawk/env_vars.sh
echo "#!/bin/bash" | tee $SCRIPTDIR/../modules/firehawk/env_vars.sh
export TF_VAR_ami_commit_hash="$(cd $TF_VAR_firehawk_ami_path; git rev-parse HEAD)"
echo "export TF_VAR_ami_commit_hash=$TF_VAR_ami_commit_hash" 2>&1 | tee --append $SCRIPTDIR/../modules/firehawk/env_vars.sh

# output image id's
# These ami's are required for a full deployment
# AMI query by commit - Vault and Consul Server
ami_role="firehawk_ubuntu18_vault_consul_server_ami"
export TF_VAR_vault_consul_ami_id=$(retrieve_ami $latest_ami $ami_role $TF_VAR_ami_commit_hash)
output_ami_var "$ami_role" "$TF_VAR_vault_consul_ami_id" "TF_VAR_vault_consul_ami_id"
# AMI query by commit - Vault and Consul Client
ami_role="firehawk_centos7_ami"
export TF_VAR_vault_client_ami_id=$(retrieve_ami $latest_ami $ami_role $TF_VAR_ami_commit_hash)
output_ami_var "$ami_role" "$TF_VAR_vault_client_ami_id" "TF_VAR_vault_client_ami_id"
# AMI query by commit - Bastion Host
ami_role="firehawk_centos7_ami"
export TF_VAR_bastion_ami_id=$(retrieve_ami $latest_ami $ami_role $TF_VAR_ami_commit_hash)
output_ami_var "$ami_role" "$TF_VAR_bastion_ami_id" "TF_VAR_bastion_ami_id"
# AMI query by commit - Open VPN Server
ami_role="firehawk_openvpn_server_ami"
export TF_VAR_openvpn_server_ami=$(retrieve_ami $latest_ami $ami_role $TF_VAR_ami_commit_hash)
output_ami_var "$ami_role" "$TF_VAR_openvpn_server_ami" "TF_VAR_openvpn_server_ami"
# AMI query by commit - Deadline DB
ami_role="firehawk_deadlinedb_ami"
export TF_VAR_deadline_db_ami_id=$(retrieve_ami $latest_ami $ami_role $TF_VAR_ami_commit_hash)
output_ami_var "$ami_role" "$TF_VAR_deadline_db_ami_id" "TF_VAR_deadline_db_ami_id"
# AMI query by commit - Render node
ami_role="firehawk_centos7_rendernode_ami"
export TF_VAR_node_centos7_houdini_ami_id=$(retrieve_ami $latest_ami $ami_role $TF_VAR_ami_commit_hash)
output_ami_var "$ami_role" "$TF_VAR_node_centos7_houdini_ami_id" "TF_VAR_node_centos7_houdini_ami_id"
# AMI query by commit - Workstation
ami_role="firehawk_amazonlinux2_ami"
export TF_VAR_provisioner_ami_id=$(retrieve_ami $latest_ami $ami_role $TF_VAR_ami_commit_hash)
output_ami_var "$ami_role" "$TF_VAR_provisioner_ami_id" "TF_VAR_provisioner_ami_id"
# AMI query by commit - Workstation
ami_role="firehawk_amazonlinux2_nicedcv_ami"
export TF_VAR_workstation_amazonlinux2_nicedcv_ami_id=$(retrieve_ami $latest_ami $ami_role $TF_VAR_ami_commit_hash)
output_ami_var "$ami_role" "$TF_VAR_workstation_amazonlinux2_nicedcv_ami_id" "TF_VAR_workstation_amazonlinux2_nicedcv_ami_id"

if [[ "$success" == "false" ]]; then
  echo "ERROR: Cannot depoloy without all images."
  exit 1
fi

cd $SCRIPTDIR/../modules
rm -fr codedeploy-app-firehawk.zip
zip -qr codedeploy-app-firehawk.zip firehawk/??*

aws s3 cp codedeploy-app-firehawk.zip s3://codedeploy.dev.firehawkvfx.com

aws deploy create-deployment \
  --application-name firehawk-codedeploy-app \
  --deployment-config-name CodeDeployDefault.OneAtATime \
  --deployment-group-name firehawk-deployment-group \
  --description "Firehawk deployment" \
  --s3-location bucket=codedeploy.dev.firehawkvfx.com,bundleType=zip,key=codedeploy-app-firehawk.zip \
  --file-exists-behavior OVERWRITE
cd $EXECDIR