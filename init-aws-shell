#!/bin/bash

# defaults
resourcetier="dev"
DEFAULT_ASK="true"
export TF_VAR_resourcetier="$resourcetier"

set -e

aws sts get-caller-identity

SOURCE=${BASH_SOURCE[0]} # resolve the script dir even if a symlink is used to this script
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPTDIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
cd $SCRIPTDIR

dirname=${SCRIPTDIR##*/}
targetdir="/aws/mde/tmp"

echo "pwd: $PWD"
git pull origin
./gitpullrecursive --init-all

app/modules/firehawk/scripts/diskspace_check

sudo mkdir -p $targetdir
sudo chown $USER:$USER $targetdir
sudo chmod +rwX $targetdir
if [[ -d "$targetdir/$dirname" ]]; then # clean dir if exist
  rm -fr "$targetdir/$dirname"
fi
cp -fr $SCRIPTDIR $targetdir/.

cd $targetdir/$dirname

$targetdir/$dirname/install-packages

function get_and_set_parm {
  local -r parameter_name="$1"
  local -r parameter_example="$2"
  local -r parameter_description="$3"
  local -r parameter_requirements="$4"
  local -r regex="$5"
  local -r test_cidr="$6"
  local -r parameter_value_default="$7"

  # check existance of ssm parameter for parameter name.  Required.
  get_parameters=$( aws ssm get-parameters --names \
    "/firehawk/resourcetier/${TF_VAR_resourcetier}/${parameter_name}" )
  num_invalid=$(echo $get_parameters | jq '.InvalidParameters| length')
  # changed="false"
  ask="$DEFAULT_ASK"

  if [[ "$ask" == "false" ]]; then #: determine if ask needs to be set to true here.
    if [[ ! $num_invalid -eq 0 ]]; then
      ask="true"
      echo ""
      echo "SSM parameter not yet set"
      echo "You must set the SSM parameter for /firehawk/resourcetier/${TF_VAR_resourcetier}/${parameter_name}"
    else
      parameter_value=$(echo $get_parameters | jq ".Parameters[]| select(.Name == \"/firehawk/resourcetier/${TF_VAR_resourcetier}/${parameter_name}\")|.Value" --raw-output)
      # if [[ ! -z "$regex" ]]; then
      #   if [[ $parameter_value =~ $regex ]]; then
      #     echo "...Retrieved ${parameter_name}: $parameter_value"
      #   else
      #     echo ""
      #     echo "Present SSM Parameter format of value $parameter_name is incorrect or not set.  Current value: $parameter_value"
      #     echo "get_parameters: $get_parameters"
      #     echo "Should be of format example: $parameter_example"
      #     ask="true"
      #   fi
      # elif [[ "$test_cidr" == "true" ]]; then
      #   fn_test_cidr "$parameter_value"
      # fi
      echo "...Retrieved ${parameter_name}: $parameter_value"
      if [[ -z "$parameter_value" ]]; then
        echo ""
        echo "Paremeter value is empty."
        echo "Present SSM Parameter format of value $parameter_name is incorrect or not set.  Current value: $parameter_value"
        echo "get_parameters: $get_parameters"
        echo "Should be of format example: $parameter_example"
        ask="true"
      fi
    fi
  fi

  while [[ "$ask" == "true" ]]; do
    echo ""
    echo "$parameter_requirements"
    read -p "Enter $parameter_name (eg: $parameter_example) : " parameter_value
    if [[ ! -z "$parameter_value_default" ]]; then
      parameter_value=${parameter_value:-$parameter_value_default}
    fi
    echo ""

    echo "...Setting $parameter_name: $parameter_value"
    output=$(aws ssm put-parameter \
      --name "/firehawk/resourcetier/${TF_VAR_resourcetier}/${parameter_name}" \
      --description "$parameter_description" \
      --value "$parameter_value" \
      --type "String" \
      --tier Advanced \
      --overwrite \
      --allowed-pattern "$regex") && exit_status=0 || exit_status=$?

    echo "$output"

    if [[ $exit_status -eq 0 ]]; then
      ask="false"
      # return
    else
      echo "Error Setting parameter."
    fi

    # if [[ ! -z "$regex" ]]; then
    #   while [[ ! "$parameter_value" =~ "$regex" ]]; do
    #     echo "Format is incorrect.  eg: $parameter_example"
    #     read -p "Enter $parameter_name (eg: $parameter_example) : " parameter_value
    #     echo ""
    #   done
    # fi
    # changed="true"
  done

  # if [[ "$changed" == "true" ]]; then
  #   echo "...Setting $parameter_name: $parameter_value"
  #   aws ssm put-parameter \
  #     --name "/firehawk/resourcetier/${TF_VAR_resourcetier}/${parameter_name}" \
  #     --description "$parameter_description" \
  #     --value "$parameter_value" \
  #     --type "String" \
  #     --tier Advanced
  #     --allowed-pattern "$regex"
  # fi
}

parameter_name="git_repo_id"
parameter_example="mygitusername/firehawk"
parameter_description="The ID of your git repo fork of firehawk. eg: $parameter_example"
parameter_requirements=$(cat << EOF
You must have your own fork of firehawkvfx/firehawk in github to continue to trigger automation within your control.
Ensure you have made your own fork of github.com/firehawkvfx/firehawk and continue.

Specify the git repo id of your fork from firehawkvfx/firehawk (Public repos are tested, private repos are not tested):
EOF
)
regex="[0-9a-zA-Z]+[/][0-9a-zA-Z]+"
test_cidr="false" #: This is now inactive
parameter_value_default=""
get_and_set_parm "$parameter_name" "$parameter_example" "$parameter_description" "$parameter_requirements" "$regex" "$test_cidr" "$parameter_value_default"

parameter_name="combined_vpcs_cidr"
parameter_example="10.1.0.0/16"
parameter_description="The IP range used for all cloud VPC's. eg: $parameter_example"
parameter_requirements=$(cat << EOF
The IP range used for the main and rendering VPCs.
Cloud hosts will reside within this range and it must not intersect with your private network range.
eg: 10.4.0.0/16 will not interfere with 192.168.1.0/24. eg: dev=10.1.0.0/16, blue=10.2.0.0/16, green=10.3.0.0/16, main=10.4.0.0/16

Specify IP range used for all cloud VPC's:
EOF
)
regex=""
test_cidr="true" #: This is now inactive
parameter_value_default="10.1.0.0/16"
get_and_set_parm "$parameter_name" "$parameter_example" "$parameter_description" "$parameter_requirements" "$regex" "$test_cidr" "$parameter_value_default"

source $targetdir/$dirname/update_vars.sh --resourcetier $resourcetier
# $targetdir/$dirname/init/init-aws-shell